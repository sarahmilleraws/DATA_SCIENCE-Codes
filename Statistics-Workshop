{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# What's Normal? -- Temperature, Gender, and Heart Rate"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- We will study with a dataset on body temperature, gender, and heart rate.\n",
    "- We'll try to understand the concepts like \n",
    "    - true means, \n",
    "    - confidence intervals, \n",
    "    - t-statistics, \n",
    "    - t-tests, \n",
    "    - the normal distribution, and \n",
    "    - regression.\n",
    "\n",
    "\n",
    "- The data were derived from an article in the Journal of the American Medical Association entitled \"A Critical Appraisal of 98.6 Degrees F, the Upper Limit of the Normal Body Temperature, and Other Legacies of Carl Reinhold August Wunderlich\" (Mackowiak, Wasserman, and Levine 1992).\n",
    "- Source: http://jse.amstat.org/v4n2/datasets.shoemaker.html"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Column Reference"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<style type=\"text/css\">\n",
    ".tg  {border-collapse:collapse;border-spacing:0;}\n",
    ".tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n",
    "  overflow:hidden;padding:10px 5px;word-break:normal;}\n",
    ".tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n",
    "  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n",
    ".tg .tg-0lax{text-align:left;vertical-align:top}\n",
    ".tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:top}\n",
    "</style>\n",
    "<table class=\"tg\">\n",
    "<thead>\n",
    "  <tr>\n",
    "    <th class=\"tg-0lax\">Variable</th>\n",
    "    <th class=\"tg-0lax\">Type</th>\n",
    "    <th class=\"tg-0lax\">Explanation</th>\n",
    "  </tr>\n",
    "</thead>\n",
    "<tbody>\n",
    "  <tr>\n",
    "    <td class=\"tg-0pky\">temperature</td>\n",
    "    <td class=\"tg-0pky\">Numeric</td>\n",
    "    <td class=\"tg-0pky\">Body Temperature (degrees Fahrenheit)</td>\n",
    "  </tr>\n",
    "  <tr>\n",
    "    <td class=\"tg-0pky\">gender</td>\n",
    "    <td class=\"tg-0pky\">Categorical</td>\n",
    "    <td class=\"tg-0pky\">Gender (1=Male, 2=Female)</td>\n",
    "  </tr>\n",
    "  <tr>\n",
    "    <td class=\"tg-0lax\">heart_rate</td>\n",
    "    <td class=\"tg-0lax\">Numeric</td>\n",
    "    <td class=\"tg-0lax\">Heart Rate (beats per minute)</td>\n",
    "  </tr>\n",
    "</tbody>\n",
    "</table>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Preperation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "⭐ Import **pandas**, **scipy.stats**, **seaborn**, and **matplotlib.pyplot** libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from scipy import stats\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "⭐Run the following code to read in the \"normtemp.dat.txt\" file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('http://jse.amstat.org/datasets/normtemp.dat.txt', delim_whitespace=True, names=[\"temperature\", \"gender\", \"heart_rate\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>temperature</th>\n",
       "      <th>gender</th>\n",
       "      <th>heart_rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>96.3</td>\n",
       "      <td>1</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>96.7</td>\n",
       "      <td>1</td>\n",
       "      <td>71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>96.9</td>\n",
       "      <td>1</td>\n",
       "      <td>74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>97.0</td>\n",
       "      <td>1</td>\n",
       "      <td>80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>97.1</td>\n",
       "      <td>1</td>\n",
       "      <td>73</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   temperature  gender  heart_rate\n",
       "0         96.3       1          70\n",
       "1         96.7       1          71\n",
       "2         96.9       1          74\n",
       "3         97.0       1          80\n",
       "4         97.1       1          73"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 130 entries, 0 to 129\n",
      "Data columns (total 3 columns):\n",
      "temperature    130 non-null float64\n",
      "gender         130 non-null int64\n",
      "heart_rate     130 non-null int64\n",
      "dtypes: float64(1), int64(2)\n",
      "memory usage: 3.2 KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "⭐Replace the gender levels [1, 2]  with [\"male\", \"female\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "df[\"gender\"] = df[\"gender\"].replace(to_replace=[1,2], value=[\"male\", \"female\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>temperature</th>\n",
       "      <th>gender</th>\n",
       "      <th>heart_rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>96.3</td>\n",
       "      <td>male</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>96.7</td>\n",
       "      <td>male</td>\n",
       "      <td>71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>96.9</td>\n",
       "      <td>male</td>\n",
       "      <td>74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>97.0</td>\n",
       "      <td>male</td>\n",
       "      <td>80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>97.1</td>\n",
       "      <td>male</td>\n",
       "      <td>73</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   temperature gender  heart_rate\n",
       "0         96.3   male          70\n",
       "1         96.7   male          71\n",
       "2         96.9   male          74\n",
       "3         97.0   male          80\n",
       "4         97.1   male          73"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task-1. Is the *body temperature* population mean  98.6 degrees F?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "⭐What is the mean for body temperature?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "98.24923076923076"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.temperature.mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "⭐What is the standard deviation for body temperature?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7331831580389456"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.temperature.std()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "⭐What is the standard error of the mean for body temperature?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.06430441683789102"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.temperature.sem()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "⭐Plot the distribution of body temperature. You can either use *Pandas* or *Seaborn*."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.temperature.plot.density();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(df['temperature'], hist=True, kde=True, \n",
    "             bins=int(130/13), color = 'darkblue', \n",
    "             hist_kws={'edgecolor':'black'},\n",
    "             kde_kws={'linewidth': 4});"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "⭐Investigate the given task by calculating the confidence interval for this sample of 130 subjects. (Use 90%, 95% and 99% CIs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CI 90%: (98.14269432413488, 98.35576721432665)\n",
      "CI 95%: (98.12200290560803, 98.3764586328535)\n",
      "CI 99%: (98.08110824239758, 98.41735329606395)\n"
     ]
    }
   ],
   "source": [
    "lower = []\n",
    "upper = []\n",
    "\n",
    "for i in [0.90,0.95,0.99]:\n",
    "    ci = stats.t.interval(i, len(df.temperature)-1, loc=df.temperature.mean(), scale=df.temperature.sem())\n",
    "    lower.append(ci[0])\n",
    "    upper.append(ci[1])\n",
    "    print('CI {i}%: {interval}'.format(i=int(i*100), interval=ci))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot((lower,upper), (range(len(lower)),range(len(lower))), 'ro-',color='red')\n",
    "plt.yticks(range(3),[\"CI 90%\",\"CI 95%\",\"CI 99%\"]);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "⭐**Investigate the given task by using One Sample t Test.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "___🚀First, check the normality. *Use scipy.stats.shapiro"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<i>H<i/><sub>0</sub>: \"the variable is normally distributed\"<br>\n",
    "<i>H<i/><sub>1</sub>: \"the variable is not normally distributed\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "stat, p = stats.shapiro(df.temperature)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Statistics=0.987, p=0.233\n",
      "Sample looks Gaussian (fail to reject H0)\n"
     ]
    }
   ],
   "source": [
    "print('Statistics=%.3f, p=%.3f' % (stat, p))\n",
    "# interpret\n",
    "alpha = 0.05\n",
    "if p > alpha:\n",
    "\tprint('Sample looks Gaussian (fail to reject H0)')\n",
    "else:\n",
    "\tprint('Sample does not look Gaussian (reject H0)')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "___🚀Then, conduct the significance test. *Use scipy.stats.ttest_1samp*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ttest_1sampResult(statistic=-5.454823292364077, pvalue=2.410632041561008e-07)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.ttest_1samp(df.temperature, 98.6)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The sample standard deviation is .73, so the standard error of the mean is .064. Thus the calculated t (using the sample mean of 98.25) is -5.45."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task-2. Is There a Significant Difference Between Males and Females in Normal Temperature?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "H0: µ1 = µ2 (\"the two population means are equal\")\n",
    "\n",
    "H1: µ1 ≠ µ2 (\"the two population means are not equal\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "⭐Show descriptives for 2 groups"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gender</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>female</td>\n",
       "      <td>65.0</td>\n",
       "      <td>98.393846</td>\n",
       "      <td>0.743488</td>\n",
       "      <td>96.4</td>\n",
       "      <td>98.0</td>\n",
       "      <td>98.4</td>\n",
       "      <td>98.8</td>\n",
       "      <td>100.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>male</td>\n",
       "      <td>65.0</td>\n",
       "      <td>98.104615</td>\n",
       "      <td>0.698756</td>\n",
       "      <td>96.3</td>\n",
       "      <td>97.6</td>\n",
       "      <td>98.1</td>\n",
       "      <td>98.6</td>\n",
       "      <td>99.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        count       mean       std   min   25%   50%   75%    max\n",
       "gender                                                           \n",
       "female   65.0  98.393846  0.743488  96.4  98.0  98.4  98.8  100.8\n",
       "male     65.0  98.104615  0.698756  96.3  97.6  98.1  98.6   99.5"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby(\"gender\").describe()[\"temperature\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "⭐Plot the histogram for both groups side-by-side."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df[\"temperature\"].hist(by=df[\"gender\"]);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "⭐Plot the box plot for both groups side-by-side."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.boxplot(\"temperature\", by = \"gender\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "⭐**Investigate the given task by using Independent Samples t Test.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "___🚀First, check the normality for both groups. *Use scipy.stats.shapiro*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Statistics=0.989, p=0.855\n",
      "Sample looks Gaussian (fail to reject H0)\n"
     ]
    }
   ],
   "source": [
    "#Check the normality for male group\n",
    "\n",
    "stat, p = stats.shapiro(df[df[\"gender\"]==\"male\"][\"temperature\"])\n",
    "\n",
    "print('Statistics=%.3f, p=%.3f' % (stat, p))\n",
    "# interpret\n",
    "alpha = 0.05\n",
    "if p > alpha:\n",
    "\tprint('Sample looks Gaussian (fail to reject H0)')\n",
    "else:\n",
    "\tprint('Sample does not look Gaussian (reject H0)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Statistics=0.968, p=0.090\n",
      "Sample looks Gaussian (fail to reject H0)\n"
     ]
    }
   ],
   "source": [
    "#Check the normality for female group\n",
    "\n",
    "stat, p = stats.shapiro(df[df[\"gender\"]==\"female\"][\"temperature\"])\n",
    "\n",
    "print('Statistics=%.3f, p=%.3f' % (stat, p))\n",
    "# interpret\n",
    "alpha = 0.05\n",
    "if p > alpha:\n",
    "\tprint('Sample looks Gaussian (fail to reject H0)')\n",
    "else:\n",
    "\tprint('Sample does not look Gaussian (reject H0)')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "___🚀Test the assumption of homogeneity of variance\n",
    "*Hint: Levene’s Test*\n",
    "\n",
    "The hypotheses for Levene’s test are: \n",
    "\n",
    "<i>H<i/><sub>0</sub>: \"the population variances of group 1 and 2 are equal\"\n",
    "    \n",
    "<i>H<i/><sub>1</sub>: \"the population variances of group 1 and 2 are not equal\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Statistics=0.064, p=0.801\n",
      "The population variances of group 1 and 2 are equal (fail to reject H0)\n"
     ]
    }
   ],
   "source": [
    "stat, p = stats.levene(df[df[\"gender\"]==\"male\"][\"temperature\"],df[df[\"gender\"]==\"female\"][\"temperature\"])\n",
    "\n",
    "print('Statistics=%.3f, p=%.3f' % (stat, p))\n",
    "# interpret\n",
    "alpha = 0.05\n",
    "if p > alpha:\n",
    "\tprint('The population variances of group 1 and 2 are equal (fail to reject H0)')\n",
    "else:\n",
    "\tprint('The population variances of group 1 and 2 are not equal (reject H0)')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "___🚀Conduct the significance test. Use scipy.stats.ttest_ind\n",
    "\n",
    "H0: µ1 = µ2 (\"the two population means are equal\")\n",
    "\n",
    "H1: µ1 ≠ µ2 (\"the two population means are not equal\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ttest_indResult(statistic=-2.2854345381654984, pvalue=0.023938264182940983)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.ttest_ind(df[df[\"gender\"]==\"male\"][\"temperature\"],df[df[\"gender\"]==\"female\"][\"temperature\"], equal_var = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "At 0.05 level of significance, we can reject the null hypothesis in favor of the alternative hypothesis.\n"
     ]
    }
   ],
   "source": [
    "twosample = stats.ttest_ind(df[df[\"gender\"]==\"male\"][\"temperature\"],df[df[\"gender\"]==\"female\"][\"temperature\"], equal_var = False)\n",
    "\n",
    "alpha = 0.05\n",
    "p_value = twosample.pvalue\n",
    "\n",
    "if p_value<alpha:\n",
    "    print('At {} level of significance, we can reject the null hypothesis in favor of the alternative hypothesis.'.format(alpha))\n",
    "else:\n",
    "    print('At {} level of significance, we fail to reject the null hypothesis.'.format(alpha))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task-3. Is There a Relationship Between Body Temperature and Heart Rate?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "⭐Plot the scatter plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.plot.scatter(\"temperature\", \"heart_rate\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "⭐Check the normality for heart rate variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Statistics=0.989, p=0.355\n",
      "Sample looks Gaussian (fail to reject H0)\n"
     ]
    }
   ],
   "source": [
    "stat, p = stats.shapiro(df[\"heart_rate\"])\n",
    "\n",
    "print('Statistics=%.3f, p=%.3f' % (stat, p))\n",
    "# interpret\n",
    "alpha = 0.05\n",
    "if p > alpha:\n",
    "\tprint('Sample looks Gaussian (fail to reject H0)')\n",
    "else:\n",
    "\tprint('Sample does not look Gaussian (reject H0)')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "⭐**Conduct a correlation test**, report Pearson’s correlation coefficient and two-tailed p-value. *Use scipy.stats.pearsonr*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Two-tailed significance test:\n",
    "\n",
    "H0: ρ = 0 (\"the population correlation coefficient is 0; there is no association\")\n",
    "\n",
    "H1: ρ ≠ 0 (\"the population correlation coefficient is not 0; a nonzero correlation could exist\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.2536564027207642, 0.003591489250708227)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r = stats.pearsonr(df[\"temperature\"],df[\"heart_rate\"])\n",
    "r"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "⭐**Find a regression equation** to predict heart rate from body temperature."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinregressResult(slope=2.443238038611885, intercept=-166.2847194182034, rvalue=0.2536564027207643, pvalue=0.003591489250708216, stderr=0.8235190209144222)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res = stats.linregress(df[\"temperature\"],df[\"heart_rate\"])\n",
    "res"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "⭐Calculate the predicted heart rate of a person at the temperature 97 F."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "70.70937032714943"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp = 97\n",
    "res.slope * temp + res.intercept"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "⭐How much of the variation of the heart_rate variable is explained by the temperature variable? *Coefficient of determination (R-squared):*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0643415706412385"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Rsquared = r[0]**2\n",
    "Rsquared"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Spring 2014 Semester Survey"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- This dataset contains survey results from 435 students enrolled at a university in the United States. The survey was conducted during the Spring 2014 semester.\n",
    "\n",
    "- This data was simulated using random number generation.\n",
    "\n",
    "- Source: Kent State University (https://www.kent.edu/)\n",
    "\n",
    "- Data Description can be found at: https://libguides.library.kent.edu/ld.php?content_id=11205386"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "⭐Run the following code to read the dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "survey = pd.read_csv('https://raw.githubusercontent.com/clarusway/clarusway-ds-students-7-21/main/3-%20Classes_Labs/Statistics/data/university_survey_2014.csv?token=APETIRNTA43C4ENKQ7ABKBTARLBD2')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ids</th>\n",
       "      <th>bday</th>\n",
       "      <th>enrolldate</th>\n",
       "      <th>expgradate</th>\n",
       "      <th>Rank</th>\n",
       "      <th>Major</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Athlete</th>\n",
       "      <th>Height</th>\n",
       "      <th>Weight</th>\n",
       "      <th>...</th>\n",
       "      <th>English</th>\n",
       "      <th>Reading</th>\n",
       "      <th>Math</th>\n",
       "      <th>Writing</th>\n",
       "      <th>State</th>\n",
       "      <th>LiveOnCampus</th>\n",
       "      <th>HowCommute</th>\n",
       "      <th>CommuteTime</th>\n",
       "      <th>SleepTime</th>\n",
       "      <th>StudyTime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>43783</td>\n",
       "      <td>3/22/1995</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>72.35</td>\n",
       "      <td></td>\n",
       "      <td>...</td>\n",
       "      <td>88.24</td>\n",
       "      <td>81.5</td>\n",
       "      <td>60.02</td>\n",
       "      <td>81.44</td>\n",
       "      <td>In state</td>\n",
       "      <td>1</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>20278</td>\n",
       "      <td>1/1/1995</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>Philosophy</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>70.66</td>\n",
       "      <td>179.2</td>\n",
       "      <td>...</td>\n",
       "      <td>89.45</td>\n",
       "      <td>85.25</td>\n",
       "      <td>70.19</td>\n",
       "      <td>73.27</td>\n",
       "      <td></td>\n",
       "      <td>1</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>20389</td>\n",
       "      <td>12/31/1994</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>70.68</td>\n",
       "      <td>198.52</td>\n",
       "      <td>...</td>\n",
       "      <td>96.73</td>\n",
       "      <td>86.88</td>\n",
       "      <td>71.2</td>\n",
       "      <td>84.24</td>\n",
       "      <td>In state</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>8</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>22820</td>\n",
       "      <td>12/1/1994</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>business administration</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td></td>\n",
       "      <td>198.34</td>\n",
       "      <td>...</td>\n",
       "      <td>74.06</td>\n",
       "      <td>88.68</td>\n",
       "      <td>55.89</td>\n",
       "      <td>73.16</td>\n",
       "      <td>In state</td>\n",
       "      <td>1</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>24559</td>\n",
       "      <td>11/10/1994</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>67.43</td>\n",
       "      <td>128.17</td>\n",
       "      <td>...</td>\n",
       "      <td>82.61</td>\n",
       "      <td>77.3</td>\n",
       "      <td>65.52</td>\n",
       "      <td>80.45</td>\n",
       "      <td>Out of state</td>\n",
       "      <td>1</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     ids        bday enrolldate expgradate Rank                    Major  \\\n",
       "0  43783   3/22/1995                                                       \n",
       "1  20278    1/1/1995                                          Philosophy   \n",
       "2  20389  12/31/1994                                                       \n",
       "3  22820   12/1/1994                             business administration   \n",
       "4  24559  11/10/1994                                                       \n",
       "\n",
       "  Gender  Athlete Height  Weight  ... English Reading   Math Writing  \\\n",
       "0      0        0  72.35          ...   88.24    81.5  60.02   81.44   \n",
       "1      0        0  70.66   179.2  ...   89.45   85.25  70.19   73.27   \n",
       "2      0        0  70.68  198.52  ...   96.73   86.88   71.2   84.24   \n",
       "3      1        0         198.34  ...   74.06   88.68  55.89   73.16   \n",
       "4      1        1  67.43  128.17  ...   82.61    77.3  65.52   80.45   \n",
       "\n",
       "          State LiveOnCampus HowCommute CommuteTime SleepTime StudyTime  \n",
       "0      In state            1                                7         1  \n",
       "1                          1                                5         2  \n",
       "2      In state                                             8         7  \n",
       "3      In state            1                                2         6  \n",
       "4  Out of state            1                                7         3  \n",
       "\n",
       "[5 rows x 23 columns]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "survey.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Know your data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 435 entries, 0 to 434\n",
      "Data columns (total 23 columns):\n",
      "ids             435 non-null int64\n",
      "bday            435 non-null object\n",
      "enrolldate      435 non-null object\n",
      "expgradate      435 non-null object\n",
      "Rank            435 non-null object\n",
      "Major           434 non-null object\n",
      "Gender          435 non-null object\n",
      "Athlete         435 non-null int64\n",
      "Height          435 non-null object\n",
      "Weight          435 non-null object\n",
      "Smoking         435 non-null object\n",
      "Sprint          435 non-null object\n",
      "MileMinDur      435 non-null object\n",
      "English         435 non-null object\n",
      "Reading         435 non-null object\n",
      "Math            435 non-null object\n",
      "Writing         435 non-null object\n",
      "State           435 non-null object\n",
      "LiveOnCampus    435 non-null object\n",
      "HowCommute      435 non-null object\n",
      "CommuteTime     435 non-null object\n",
      "SleepTime       435 non-null object\n",
      "StudyTime       435 non-null object\n",
      "dtypes: int64(2), object(21)\n",
      "memory usage: 78.3+ KB\n"
     ]
    }
   ],
   "source": [
    "survey.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "⭐Change Math, English, Reading, and Writing colums to numeric. *Use pd.to_numeric*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "survey[\"Math\"] = pd.to_numeric(survey[\"Math\"],errors='coerce')\n",
    "survey[\"English\"] = pd.to_numeric(survey[\"English\"],errors='coerce')\n",
    "survey[\"Reading\"] = pd.to_numeric(survey[\"Reading\"],errors='coerce')\n",
    "survey[\"Writing\"] = pd.to_numeric(survey[\"Writing\"],errors='coerce')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task-1. Paired Samples t Test"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The sample dataset has placement test scores (out of 100 points) for four subject areas: English, Reading, Math, and Writing. Students in the sample completed all 4 placement tests when they enrolled in the university. Suppose we are particularly interested in the **English** and **Math** sections, and want to determine whether students tended to score higher on their English or Math test, on average. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "⭐Show descriptives for the two sections"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>English</td>\n",
       "      <td>409.0</td>\n",
       "      <td>82.787555</td>\n",
       "      <td>6.839803</td>\n",
       "      <td>59.83</td>\n",
       "      <td>78.3300</td>\n",
       "      <td>83.150</td>\n",
       "      <td>87.1700</td>\n",
       "      <td>101.95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Math</td>\n",
       "      <td>422.0</td>\n",
       "      <td>65.468009</td>\n",
       "      <td>8.375930</td>\n",
       "      <td>35.32</td>\n",
       "      <td>60.2025</td>\n",
       "      <td>65.445</td>\n",
       "      <td>70.5675</td>\n",
       "      <td>93.78</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         count       mean       std    min      25%     50%      75%     max\n",
       "English  409.0  82.787555  6.839803  59.83  78.3300  83.150  87.1700  101.95\n",
       "Math     422.0  65.468009  8.375930  35.32  60.2025  65.445  70.5675   93.78"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "survey.describe()[[\"English\", \"Math\"]].T"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "⭐Plot the histogram for both groups side-by-side."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "survey[[\"Math\", \"English\"]].hist();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "⭐Plot the box plot for both variables side-by-side."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "survey[[\"Math\", \"English\"]].boxplot();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "⭐Create a paired dataset as named *pairset*. Remove missing values. *Use dropna*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Math</th>\n",
       "      <th>English</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>60.02</td>\n",
       "      <td>88.24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>70.19</td>\n",
       "      <td>89.45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>71.20</td>\n",
       "      <td>96.73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>55.89</td>\n",
       "      <td>74.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>65.52</td>\n",
       "      <td>82.61</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Math  English\n",
       "0  60.02    88.24\n",
       "1  70.19    89.45\n",
       "2  71.20    96.73\n",
       "3  55.89    74.06\n",
       "4  65.52    82.61"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pairset = survey[[\"Math\", \"English\"]].dropna()\n",
    "pairset.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "⭐Conduct the significance test. Use *scipy.stats.ttest_rel*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ttest_relResult(statistic=-36.312568981719856, pvalue=3.0710987192210606e-128)"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.ttest_rel(pairset[\"Math\"], pairset[\"English\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "At 0.05 level of significance, we can reject the null hypothesis in favor of the alternative hypothesis.\n"
     ]
    }
   ],
   "source": [
    "pairedtest = stats.ttest_rel(pairset[\"Math\"], pairset[\"English\"])\n",
    "\n",
    "alpha = 0.05\n",
    "p_value = pairedtest.pvalue\n",
    "\n",
    "if p_value<alpha:\n",
    "    print('At {} level of significance, we can reject the null hypothesis in favor of the alternative hypothesis.'.format(alpha))\n",
    "else:\n",
    "    print('At {} level of significance, we fail to reject the null hypothesis.'.format(alpha))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "⭐Compute pairwise correlation of sections (English, Reading, Math, and Writing), excluding NA/null values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Math</th>\n",
       "      <th>English</th>\n",
       "      <th>Reading</th>\n",
       "      <th>Writing</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>60.02</td>\n",
       "      <td>88.24</td>\n",
       "      <td>81.50</td>\n",
       "      <td>81.44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>70.19</td>\n",
       "      <td>89.45</td>\n",
       "      <td>85.25</td>\n",
       "      <td>73.27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>71.20</td>\n",
       "      <td>96.73</td>\n",
       "      <td>86.88</td>\n",
       "      <td>84.24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>55.89</td>\n",
       "      <td>74.06</td>\n",
       "      <td>88.68</td>\n",
       "      <td>73.16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>65.52</td>\n",
       "      <td>82.61</td>\n",
       "      <td>77.30</td>\n",
       "      <td>80.45</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Math  English  Reading  Writing\n",
       "0  60.02    88.24    81.50    81.44\n",
       "1  70.19    89.45    85.25    73.27\n",
       "2  71.20    96.73    86.88    84.24\n",
       "3  55.89    74.06    88.68    73.16\n",
       "4  65.52    82.61    77.30    80.45"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sections = [\"Math\", \"English\", \"Reading\", \"Writing\"]\n",
    "\n",
    "sectionset = survey[sections].dropna()\n",
    "sectionset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Math</th>\n",
       "      <th>English</th>\n",
       "      <th>Reading</th>\n",
       "      <th>Writing</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>Math</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.248545</td>\n",
       "      <td>0.518579</td>\n",
       "      <td>0.110113</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>English</td>\n",
       "      <td>0.248545</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.338691</td>\n",
       "      <td>0.375107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Reading</td>\n",
       "      <td>0.518579</td>\n",
       "      <td>0.338691</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.131742</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Writing</td>\n",
       "      <td>0.110113</td>\n",
       "      <td>0.375107</td>\n",
       "      <td>0.131742</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Math   English   Reading   Writing\n",
       "Math     1.000000  0.248545  0.518579  0.110113\n",
       "English  0.248545  1.000000  0.338691  0.375107\n",
       "Reading  0.518579  0.338691  1.000000  0.131742\n",
       "Writing  0.110113  0.375107  0.131742  1.000000"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sectionset.corr(method='pearson')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# One-way ANOVA"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the sample dataset, the variable Sprint is the respondent's time (in seconds) to sprint a given distance, and Smoking is an indicator about whether or not the respondent smokes (0 = Nonsmoker, 1 = Past smoker, 2 = Current smoker). Let's use ANOVA to test if there is a statistically significant difference in sprint time with respect to smoking status. Sprint time will serve as the dependent variable, and smoking status will act as the independent variable."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The null and alternative hypotheses of one-way ANOVA can be expressed as:\n",
    "\n",
    "H0: µ1 = µ2 = µ3  = ...   = µk   (\"all k population means are equal\")\n",
    "\n",
    "H1: At least one µi different  (\"at least one of the k population means is not equal to the others\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ids</th>\n",
       "      <th>bday</th>\n",
       "      <th>enrolldate</th>\n",
       "      <th>expgradate</th>\n",
       "      <th>Rank</th>\n",
       "      <th>Major</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Athlete</th>\n",
       "      <th>Height</th>\n",
       "      <th>Weight</th>\n",
       "      <th>...</th>\n",
       "      <th>English</th>\n",
       "      <th>Reading</th>\n",
       "      <th>Math</th>\n",
       "      <th>Writing</th>\n",
       "      <th>State</th>\n",
       "      <th>LiveOnCampus</th>\n",
       "      <th>HowCommute</th>\n",
       "      <th>CommuteTime</th>\n",
       "      <th>SleepTime</th>\n",
       "      <th>StudyTime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>43783</td>\n",
       "      <td>3/22/1995</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>72.35</td>\n",
       "      <td></td>\n",
       "      <td>...</td>\n",
       "      <td>88.24</td>\n",
       "      <td>81.50</td>\n",
       "      <td>60.02</td>\n",
       "      <td>81.44</td>\n",
       "      <td>In state</td>\n",
       "      <td>1</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>20278</td>\n",
       "      <td>1/1/1995</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>Philosophy</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>70.66</td>\n",
       "      <td>179.2</td>\n",
       "      <td>...</td>\n",
       "      <td>89.45</td>\n",
       "      <td>85.25</td>\n",
       "      <td>70.19</td>\n",
       "      <td>73.27</td>\n",
       "      <td></td>\n",
       "      <td>1</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>20389</td>\n",
       "      <td>12/31/1994</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>70.68</td>\n",
       "      <td>198.52</td>\n",
       "      <td>...</td>\n",
       "      <td>96.73</td>\n",
       "      <td>86.88</td>\n",
       "      <td>71.20</td>\n",
       "      <td>84.24</td>\n",
       "      <td>In state</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>8</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>22820</td>\n",
       "      <td>12/1/1994</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>business administration</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td></td>\n",
       "      <td>198.34</td>\n",
       "      <td>...</td>\n",
       "      <td>74.06</td>\n",
       "      <td>88.68</td>\n",
       "      <td>55.89</td>\n",
       "      <td>73.16</td>\n",
       "      <td>In state</td>\n",
       "      <td>1</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>24559</td>\n",
       "      <td>11/10/1994</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>67.43</td>\n",
       "      <td>128.17</td>\n",
       "      <td>...</td>\n",
       "      <td>82.61</td>\n",
       "      <td>77.30</td>\n",
       "      <td>65.52</td>\n",
       "      <td>80.45</td>\n",
       "      <td>Out of state</td>\n",
       "      <td>1</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     ids        bday enrolldate expgradate Rank                    Major  \\\n",
       "0  43783   3/22/1995                                                       \n",
       "1  20278    1/1/1995                                          Philosophy   \n",
       "2  20389  12/31/1994                                                       \n",
       "3  22820   12/1/1994                             business administration   \n",
       "4  24559  11/10/1994                                                       \n",
       "\n",
       "  Gender  Athlete Height  Weight  ... English Reading   Math  Writing  \\\n",
       "0      0        0  72.35          ...   88.24   81.50  60.02    81.44   \n",
       "1      0        0  70.66   179.2  ...   89.45   85.25  70.19    73.27   \n",
       "2      0        0  70.68  198.52  ...   96.73   86.88  71.20    84.24   \n",
       "3      1        0         198.34  ...   74.06   88.68  55.89    73.16   \n",
       "4      1        1  67.43  128.17  ...   82.61   77.30  65.52    80.45   \n",
       "\n",
       "          State  LiveOnCampus  HowCommute CommuteTime SleepTime StudyTime  \n",
       "0      In state             1                                 7         1  \n",
       "1                           1                                 5         2  \n",
       "2      In state                                               8         7  \n",
       "3      In state             1                                 2         6  \n",
       "4  Out of state             1                                 7         3  \n",
       "\n",
       "[5 rows x 23 columns]"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "survey.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sprint</th>\n",
       "      <th>Smoking</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>7.978</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>8.004</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td></td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>8.473</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td></td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Sprint Smoking\n",
       "0  7.978       0\n",
       "1  8.004       0\n",
       "2              0\n",
       "3  8.473        \n",
       "4              2"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "oneway = [\"Sprint\", \"Smoking\"]\n",
    "\n",
    "onewayset = survey[oneway].dropna()\n",
    "onewayset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "onewayset[\"Sprint\"] = pd.to_numeric(survey[\"Sprint\"],errors='coerce')\n",
    "onewayset[\"Smoking\"] = pd.to_numeric(survey[\"Smoking\"],errors='coerce')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "onewayset[\"Smoking\"] = onewayset[\"Smoking\"].astype('category')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0           Nonsmoker\n",
       "1           Nonsmoker\n",
       "2           Nonsmoker\n",
       "3                 NaN\n",
       "4      Current smoker\n",
       "            ...      \n",
       "430         Nonsmoker\n",
       "431         Nonsmoker\n",
       "432         Nonsmoker\n",
       "433    Current smoker\n",
       "434       Past smoker\n",
       "Name: Smoking, Length: 435, dtype: object"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "onewayset[\"Smoking\"] = onewayset[\"Smoking\"].replace([0,1,2],[\"Nonsmoker\", \"Past smoker\",\"Current smoker\"])\n",
    "\n",
    "onewayset[\"Smoking\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 435 entries, 0 to 434\n",
      "Data columns (total 2 columns):\n",
      "Sprint     374 non-null float64\n",
      "Smoking    411 non-null object\n",
      "dtypes: float64(1), object(1)\n",
      "memory usage: 10.2+ KB\n"
     ]
    }
   ],
   "source": [
    "onewayset.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "⭐Descriptive for each group"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Smoking</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>Current smoker</td>\n",
       "      <td>59.0</td>\n",
       "      <td>7.120915</td>\n",
       "      <td>1.083500</td>\n",
       "      <td>5.295</td>\n",
       "      <td>6.2925</td>\n",
       "      <td>7.013</td>\n",
       "      <td>7.983</td>\n",
       "      <td>9.475</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Nonsmoker</td>\n",
       "      <td>261.0</td>\n",
       "      <td>6.411487</td>\n",
       "      <td>1.251783</td>\n",
       "      <td>4.503</td>\n",
       "      <td>5.3600</td>\n",
       "      <td>6.326</td>\n",
       "      <td>7.337</td>\n",
       "      <td>9.597</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Past smoker</td>\n",
       "      <td>33.0</td>\n",
       "      <td>6.835333</td>\n",
       "      <td>1.024415</td>\n",
       "      <td>4.889</td>\n",
       "      <td>6.0750</td>\n",
       "      <td>6.876</td>\n",
       "      <td>7.706</td>\n",
       "      <td>8.549</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                count      mean       std    min     25%    50%    75%    max\n",
       "Smoking                                                                      \n",
       "Current smoker   59.0  7.120915  1.083500  5.295  6.2925  7.013  7.983  9.475\n",
       "Nonsmoker       261.0  6.411487  1.251783  4.503  5.3600  6.326  7.337  9.597\n",
       "Past smoker      33.0  6.835333  1.024415  4.889  6.0750  6.876  7.706  8.549"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "onewayset.groupby(\"Smoking\").describe()[\"Sprint\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "nonsmoker = onewayset[onewayset[\"Smoking\"]==\"Nonsmoker\"][\"Sprint\"].dropna()\n",
    "pastsmoker = onewayset[onewayset[\"Smoking\"]==\"Past smoker\"][\"Sprint\"].dropna()\n",
    "currentsmoker = onewayset[onewayset[\"Smoking\"]==\"Current smoker\"][\"Sprint\"].dropna()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "⭐Check normality assumption for each group"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Statistics=0.969, p=0.137\n",
      "Sample looks Gaussian (fail to reject H0)\n"
     ]
    }
   ],
   "source": [
    "stat, p = stats.shapiro(currentsmoker)\n",
    "\n",
    "print('Statistics=%.3f, p=%.3f' % (stat, p))\n",
    "# interpret\n",
    "alpha = 0.05\n",
    "if p > alpha:\n",
    "\tprint('Sample looks Gaussian (fail to reject H0)')\n",
    "else:\n",
    "\tprint('Sample does not look Gaussian (reject H0)')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "⭐Run One-way ANOVA. *Use scipy.stats.f_oneway*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "H0: µ1 = µ2 = µ3  = ...   = µk   (\"all k population means are equal\")\n",
    "\n",
    "H1: At least one µi different  (\"at least one of the k population means is not equal to the others\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "F_onewayResult(statistic=9.208599845380922, pvalue=0.00012659768158159465)"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.f_oneway(nonsmoker, pastsmoker, currentsmoker)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "At 0.05 level of significance, we can reject the null hypothesis in favor of the alternative hypothesis.\n"
     ]
    }
   ],
   "source": [
    "anova = stats.f_oneway(nonsmoker, pastsmoker, currentsmoker)\n",
    "\n",
    "alpha = 0.05\n",
    "p_value = anova.pvalue\n",
    "\n",
    "if p_value<alpha:\n",
    "    print('At {} level of significance, we can reject the null hypothesis in favor of the alternative hypothesis.'.format(alpha))\n",
    "else:\n",
    "    print('At {} level of significance, we fail to reject the null hypothesis.'.format(alpha))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
